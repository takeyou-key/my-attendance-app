■目的
出退勤の時間を記録し、勤務時間を自動で算出、履歴として保存・閲覧できることで、出退勤記録を手軽に管理することを目的とする。
ユーザーの勤怠修正申請を管理者が承認・否認できる申請管理機能を提供する。

■目標
目的を達成するために、以下を実現する：
1. 個人ユーザーがログイン・会員登録を行い、自分専用の出退勤データを記録・閲覧できる仕組み
2. 勤怠データの修正申請と管理者による承認・否認のワークフロー
3. スマートフォン対応を含めたシンプルかつ直感的なUI設計
4. 日々の出退勤操作がスムーズに行えるUXの提供
5. PWA対応によるオフライン機能と自動更新機能

■開発環境
【開発言語・構造】
	言語
	JavaScript（ES6）
	フレームワーク
	React（Vite構成）
	状態管理
	React標準Hooks（useState、useEffect）
	【使用ライブラリ・機能】
	ログイン機能
	Firebase Authentication（メール・パスワード認証）
	データ保存
	Firebase Firestore（ユーザーごとの勤怠データ、申請データを保存・参照）
	UIフレームワーク
	Tailwind CSS
	ルーティング
	React Router v6
	カスタムフック
	useAuth, useClock, useSessionTimeout, usePWAUpdate
	PWA機能
	Vite PWA Plugin, Workbox
	UIコンポーネント
	React Icons, React Spinners
	【開発支援ツール】
	パッケージ管理
	npm（Node.jsv18以上に付属）
	バージョン管理
	Git/GitHub
	開発エディタ
	Cursol
	UI設計支援
	Figma（画面構成やワイヤーフレーム設計に使用）
	【デプロイ環境】
	デプロイ先
	Vercel（GitHub連携による静的ホスティング）
	【その他】
	アーキテクチャ図
	
■用語定義
出勤ボタン：勤務開始時にボタンを押し、時刻を記録する操作
退勤ボタン：勤務終了時にボタンを押し、時刻を記録する操作
勤務時間：出勤〜退勤までの差分時間（分単位）
勤怠履歴：各日ごとの出勤・退勤時間、および勤務時間を一覧で表示する機能
勤怠修正申請：ユーザーが過去の勤怠データを修正し、管理者に承認を求める申請機能
承認・否認：管理者が申請内容を確認し、承認または否認する操作
未対応に戻す：承認・否認済みの申請を未対応状態に戻す操作
Firestore：Firebaseが提供するクラウド型データベース。ユーザーごとのデータを保存するために利用
会員登録：メールアドレスとパスワードを入力し、Firebase上にユーザー情報を作成する操作
ログイン：登録済みのメールアドレスとパスワードで本人確認を行い、アプリ利用を開始する操作
管理者ログイン：管理者専用のログイン画面からログインし、管理者画面にアクセスする操作
認証状態：ログイン中かどうかを示す状態。ログイン後のみ打刻機能を利用可能とする
セッションタイムアウト：30分間無操作で自動的にログアウトする機能
PWA：プログレッシブウェブアプリ。オフライン対応やホーム画面への追加が可能

■システムの構成要素
システム構成は次の通りです。
・UI（Reactコンポーネント）
・状態管理（useState、useEffect、useAuth、useClock、useSessionTimeout、usePWAUpdate）
・データ保存（Firebase Firestore）
・ユーザー認証（Firebase Authentication）
・申請管理（Firestore: change_requests, time_records）
・ルーティング（React Router v6）
・PWA機能（Vite PWA Plugin, Workbox）
・公開環境（Vercel）

■現状の課題
現状の課題は次の通りです。
・出勤、退勤時間を紙や口頭、記憶に頼って管理している
・勤務時間の集計や確認に手間がかかる
・履歴が残らず、定期的な記録や振り返りが困難


■システム構築後のフロー
システム構築後のフローは以下を想定しています。

ユーザー側
・アプリにアクセスすると、ログイン画面が表示される
・初回アクセスのユーザーは「会員登録」画面から、メールアドレスとパスワードを入力してアカウントを作成
・ログインが完了すると、ホーム画面（打刻画面）へ遷移
・出勤ボタンを押すと現在時刻が記録される
・退勤ボタンを押すと退勤時刻と勤務時間が自動計算される
・勤怠データはユーザー単位でFirebase Firestoreに保存され、履歴として表示される
・実績確認・修正ページでプルダウンで選択した年月の打刻実績が表示される（デフォルトは当月）
・打刻実績をダブルクリックすることで修正が可能
・修正後、コメントを入力して申請ボタンを押下し、管理者に申請される
・申請一覧ページで申請した内容が「申請中」「対応済み」のタブに分けて一覧表示される
・各申請の詳細（変更前後のデータ、コメント、ステータス）が確認できる
・初回アクセス時にチュートリアルが表示される（実績確認・修正ページ）
・ユーザーの申請は最新20件まで表示される

管理者側
・管理者専用のログイン画面からログイン可能
・申請一覧で全ユーザーの申請を確認できる（最新100件まで表示）
・「未対応」「対応済み」のタブで申請を分類表示
・申請の承認・否認が可能
・複数の申請を選択して一括承認が可能
・承認・否認済みの申請を「未対応に戻す」ことが可能
・申請項目、申請日、申請者名、対象日でソート可能
・申請日、申請者名、対象日で検索可能
・変更前後のデータを比較表示
・申請時のコメントを確認可能

■利用者一覧（ステークホルダー）
・開発者（本人）：仕様策定、UI設計、実装、テスト、公開
・レビュアー（第三者）：ポートフォリオ提出時に機能と設計方針を確認する立場
・管理者：承認、データ閲覧、
・保守運用：開発者（本人）

■機能要件・非機能要件
機能要件：
ユーザー側
・出勤・退勤ボタンの実装と時刻記録
・会員登録フォーム（メール・パスワード入力 → Firebase登録）
・パスワードリセット機能
・勤怠履歴の閲覧（年月選択可能、デフォルトは当月）
・勤怠データの修正（ダブルクリックで編集）
・修正内容のコメント付き申請
・申請一覧の閲覧（申請中・対応済みをタブで切り替え）
・申請詳細の確認（変更前後のデータ比較）
・チュートリアル機能（初回アクセス時）

管理者側
・管理者専用ログイン画面
・全ユーザーの申請一覧表示（最新100件）
・申請の承認・否認機能
・一括承認機能（複数選択可能）
・承認・否認済み申請の「未対応に戻す」機能
・申請の検索・フィルター・ソート機能
・変更前後のデータ比較表示
・申請コメントの確認

共通
・勤務時間の自動計算（出勤・退勤時刻から算出）
・残業時間の自動計算
・データのFirebase Firestore保存と再読み込み
・レスポンシブUI（モバイル・タブレット・デスクトップ対応）
・ログイン・ログアウト処理（Firebase Authentication）
・認証状態の保持とチェック
・ユーザーと管理者の権限分離
・PWA対応（オフライン機能、ホーム画面追加可能）
・PWA自動更新通知機能

非機能要件：
パフォーマンス要件
・リアルタイム時刻表示は1秒間隔で更新する
・データ取得時はローディング表示
・ユーザー画面：最新20件まで表示（パフォーマンス最適化）
・管理者画面：最新100件まで表示

可用性要件
・30分間無操作で自動ログアウトする
・セッションタイムアウト時は警告を表示
・PWA対応によるオフライン機能

セキュリティ
・認証状態の永続化（Firebaseのセッション機能を利用）
・パスワードは一時的に渡し保存しない
・ユーザーと管理者の権限を分離
・認証ガードによる画面保護
・同時ログイン防止

ユーザビリティ要件
・モバイル、タブレット、デスクトップに対応
・モバイル：下部固定ナビゲーション
・デスクトップ：サイドメニューナビゲーション
・現在のページを視覚的に明示
・色分けシステム（ユーザー：紫、管理者：緑）
・統一されたボタンデザイン（rounded-lg）
・チュートリアル機能による操作ガイド
・PWA更新通知による最新版への誘導


■スケジュール
内容は以下のとおりです。

①要件確認・設計準備
要件定義書の作成（概要・機能・開発環境など）
画面構成の整理（画面一覧、ログイン/登録画面追加）
開発環境構築（Node.js/Vite/Git/Vercel初期設定）
ライブラリ選定とインストール（TailwindCSS, dayjs, firebase など）

②認証・打刻機能構築（新規構成）
・Firebase Authentication の導入と画面作成を行う
Firebaseプロジェクト作成＆初期設定（console上）
Firebase Authenticationの有効化（メール/パスワード方式）
Firebase SDK導入＆設定ファイル作成（firebaseConfig.js）
会員登録画面の作成（メール・パスワード入力 → Firebase連携）
ログイン画面の作成（認証成功後にホーム画面へ遷移）
認証状態に応じたルーティング制御（未ログイン → /loginへリダイレクト）
出勤・退勤ボタンの実装、時刻取得（dayjs）

③データ保存・履歴表示機能構築
・認証後のユーザーに対して、個別に勤怠データを保存・表示
出退勤時刻の保存処理（useState → firebase）※UIDごとに分離
勤務時間算出ロジック実装（日をまたぐ場合の考慮）
勤怠履歴データ構造設計（例：ユーザーID + 日付）
Firestoreへの永続化と再読み込み
履歴一覧画面作成（テーブル表示）
UI改善（日付・ボタンの表記やスタイル調整）

④テスト

⑤仕上げ・公開
Tailwind CSS によるスタイル微調整（スマホUI含む）
認証状態での画面切り替えテスト（ログイン前後、ログアウト動作）
モバイル画面（375px幅）での全画面動作確認
ファイル整理・リファクタリング（コンポーネント分離など）
テスト（Firebase連携の簡易ユニットテスト、認証フロー確認）
GitHub連携＋Vercelデプロイ（Firebase Auth環境での確認）