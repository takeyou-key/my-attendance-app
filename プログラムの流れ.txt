勤怠管理アプリ - プログラムの流れ詳細
=====================================

【アプリケーション起動フロー】
=====================================

1. エントリーポイント (main.jsx)
   ├── React StrictModeでアプリケーションをラップ
   ├── index.cssでTailwind CSSを読み込み
   └── App.jsxコンポーネントをレンダリング

2. アプリケーション初期化 (App.jsx)
   ├── useSessionTimeout(30, true)で30分タイムアウト設定
   ├── BrowserRouterでルーティング設定
   └── 各ルートに対応するコンポーネントを定義

【認証フロー】
=====================================

1. 初期アクセス (/)
   └── Login.jsxコンポーネントが表示される

2. ログイン処理 (Login.jsx)
   ├── フォーム入力: email, password
   ├── handleSubmit関数で認証処理
   │   ├── signOut(auth)で既存認証をクリア
   │   ├── signInWithEmailAndPasswordでログイン
   │   ├── isAdmin()で管理者権限確認
   │   └── 権限に応じてリダイレクト
   │       ├── 管理者: /admin
   │       └── 一般ユーザー: /home
   └── エラーハンドリング: 認証失敗時のメッセージ表示

3. 認証状態管理 (useAuth.js)
   ├── onAuthStateChangedで認証状態を監視
   ├── ユーザー情報を状態管理
   │   ├── user: Firebase認証ユーザー
   │   ├── userEmail: メールアドレス
   │   ├── userId: ユーザーID
   │   └── isAuthChecked: 認証チェック完了フラグ
   └── 認証必須ページでの自動リダイレクト

【ユーザー機能フロー】
=====================================

1. レイアウト構造 (Layout.jsx)
   ├── 認証状態監視: onAuthStateChanged
   ├── ヘッダー表示: Header.jsx
   ├── サイドメニュー: デスクトップ用
   ├── モバイルメニュー: ハンバーガーメニュー
   └── メインコンテンツ: Outletで子ルート表示

2. 勤怠打刻画面 (Clock.jsx)
   ├── 認証チェック: useAuthフック
   ├── 打刻機能: useClockフック
   ├── リアルタイム時刻表示: setInterval
   ├── 打刻状況表示: 出勤・退勤時刻
   └── 打刻ボタン: 出勤・退勤処理

3. 打刻処理 (useClock.js)
   ├── 今日の打刻状況取得
   │   ├── Firestoreからデータ取得: getDoc()
   │   ├── 日付文字列生成: YYYY-MM-DD形式
   │   └── ドキュメントID生成: generateDocId.timeRecord()
   ├── 出勤打刻処理
   │   ├── 現在時刻を取得
   │   ├── Firestoreにデータ保存: setDoc()
   │   └── 完了メッセージ表示
   ├── 退勤打刻処理
   │   ├── 現在時刻を取得
   │   ├── 勤務時間計算: calculateWorkTime()
   │   ├── 残業時間計算: calculateOverTime()
   │   ├── Firestoreにデータ更新: updateDoc()
   │   └── 完了メッセージ表示
   └── 状態管理
       ├── todayStatus: 今日の打刻状況
       ├── completeMessage: 完了メッセージ
       └── isDataLoaded: データ読み込み完了フラグ

【データフロー】
=====================================

1. Firestoreデータ構造
   ├── コレクション: COLLECTIONS.TIME_RECORDS
   │   ├── ドキュメントID: generateDocId.timeRecord()
   │   ├── userId: ユーザーID
   │   ├── date: 日付 (YYYY-MM-DD)
   │   ├── clockIn: 出勤時刻 (HH:MM)
   │   ├── clockOut: 退勤時刻 (HH:MM)
   │   ├── workTime: 勤務時間
   │   ├── overTime: 残業時間
   │   ├── status: ステータス
   │   └── comment: コメント
   ├── コレクション: users
   │   ├── ドキュメントID: {userId}
   │   ├── email: メールアドレス
   │   ├── role: 権限 (user/admin)
   │   └── settings: ユーザー設定
   └── コレクション: COLLECTIONS.CHANGE_REQUESTS
       ├── ドキュメントID: {requestId}
       ├── userId: ユーザーID
       ├── type: 申請タイプ
       ├── date: 申請日
       ├── month: 対象月
       ├── hours: 申請時間
       ├── status: 申請状況
       └── reason: 申請理由

2. データ操作パターン
   ├── 読み取り: getDoc()
   ├── 作成/更新: setDoc() with merge
   ├── 更新: updateDoc()
   └── クエリ: collection(), where(), orderBy()

【コンポーネント間通信】
=====================================

1. Props経由の通信
   ├── 親→子: データや関数をpropsで渡す
   ├── 子→親: コールバック関数で通知
   └── 例: Layout → Header (userEmail, onLogout)

2. カスタムフック経由の通信
   ├── useAuth: 認証状態を全コンポーネントで共有
   ├── useClock: 打刻機能をClock.jsxで使用
   └── useSessionTimeout: セッション管理を全アプリで共有

3. ローカルストレージ経由の通信
   ├── userEmail: ユーザーメールアドレス保存
   ├── adminEmail: 管理者メールアドレス保存
   └── ページリロード時の状態保持

【エラーハンドリング】
=====================================

1. 認証エラー
   ├── ログイン失敗: try-catchでキャッチ
   ├── 権限不足: isAdmin()でチェック
   ├── セッション切れ: useSessionTimeout()で自動ログアウト
   └── ネットワークエラー: 再接続処理

2. データエラー
   ├── Firestore接続エラー: console.errorでログ出力
   ├── データ取得失敗: デフォルト値でフォールバック
   ├── 保存失敗: エラーメッセージ表示
   └── バリデーション: 入力値チェック

3. UIエラー
   ├── ローディング状態: LoadingSpinner表示
   ├── エラーメッセージ: モーダルまたはインライン表示
   └── フォールバックUI: エラー時の代替表示

【状態管理パターン】
=====================================

1. ローカル状態 (useState)
   ├── フォーム入力値: email, password
   ├── UI状態: loading, error, modal
   └── 一時データ: completeMessage, todayStatus

2. グローバル状態 (カスタムフック)
   ├── 認証状態: useAuth()
   ├── 打刻状態: useClock()
   └── セッション状態: useSessionTimeout()

3. 永続化状態 (localStorage)
   ├── ユーザー情報: userEmail, adminEmail
   └── 設定情報: ユーザー設定

【パフォーマンス最適化】
=====================================

1. レンダリング最適化
   ├── useEffect依存配列の適切な設定
   ├── 不要な再レンダリングの防止
   └── メモ化: React.memo, useMemo, useCallback

2. データ取得最適化
   ├── 必要な時のみデータ取得
   ├── キャッシュ活用
   └── 重複取得の防止

3. バンドル最適化
   ├── コード分割: ページ単位
   ├── 遅延読み込み: 必要時読み込み
   └── 不要なインポート削除

【セキュリティ対策】
=====================================

1. 認証セキュリティ
   ├── Firebase Authentication使用
   ├── セッションタイムアウト設定
   ├── 権限ベースアクセス制御
   └── パスワードリセット機能

2. データセキュリティ
   ├── Firestoreセキュリティルール
   ├── ユーザー固有データアクセス制限
   └── 入力値バリデーション

3. フロントエンドセキュリティ
   ├── XSS対策: 入力値エスケープ
   ├── CSRF対策: Firebase認証トークン使用
   └── 機密情報の適切な管理

【レスポンシブ対応】
=====================================

1. ブレークポイント設定
   ├── モバイル: < 768px
   ├── タブレット: 768px - 1024px
   └── デスクトップ: > 1024px

2. レイアウト調整
   ├── モバイル: ハンバーガーメニュー
   ├── タブレット: サイドメニュー
   └── デスクトップ: 固定サイドメニュー

3. フォントサイズ調整
   ├── モバイル: 小さいフォント
   ├── タブレット: 中程度フォント
   └── デスクトップ: 大きいフォント

【デバッグ・ログ】
=====================================

1. コンソールログ
   ├── 成功ログ: ログイン成功、打刻成功
   ├── エラーログ: 認証失敗、データ取得エラー
   └── デバッグログ: 状態変更、関数実行

2. エラー監視
   ├── try-catch文でのエラーハンドリング
   ├── console.errorでのエラー出力
   └── ユーザー向けエラーメッセージ

3. パフォーマンス監視
   ├── データ取得時間
   ├── レンダリング時間
   └── メモリ使用量

=====================================
作成日: 2024年
更新日: 2024年
バージョン: 1.0.0
=====================================
